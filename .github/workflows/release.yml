name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Extract version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Verify version matches Cargo.toml
      run: |
        CARGO_VERSION=$(grep "^version = " Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        TAG_VERSION="${{ steps.version.outputs.version }}"
        if [ "$CARGO_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch: Cargo.toml has $CARGO_VERSION, tag has $TAG_VERSION"
          exit 1
        fi

    - name: Verify derive crate version matches
      run: |
        DERIVE_VERSION=$(grep "^version = " konfig_derive/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        TAG_VERSION="${{ steps.version.outputs.version }}"
        if [ "$DERIVE_VERSION" != "$TAG_VERSION" ]; then
          echo "Derive version mismatch: konfig_derive/Cargo.toml has $DERIVE_VERSION, tag has $TAG_VERSION"
          exit 1
        fi

    - name: Run full test suite
      run: |
        cargo fmt --all -- --check
        cargo clippy --all-targets --all-features -- -D warnings
        cargo test --all-features
        cargo test --doc

    - name: Verify packages can be built
      run: |
        cargo package
        cd konfig_derive && cargo package

  publish-derive:
    name: Publish Derive Crate
    runs-on: ubuntu-latest
    needs: validate
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

    - name: Publish konfig_derive
      run: |
        cd konfig_derive
        cargo publish --no-verify

    - name: Wait for crates.io propagation
      run: sleep 30

  publish-main:
    name: Publish Main Crate
    runs-on: ubuntu-latest
    needs: [validate, publish-derive]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Login to crates.io
      run: cargo login ${{ secrets.CRATES_IO_TOKEN }}

    - name: Publish konfig
      run: cargo publish --no-verify

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, publish-main]
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate release notes
      id: release_notes
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "## Changes since $PREV_TAG" > release_notes.md
          echo "" >> release_notes.md
          git log $PREV_TAG..HEAD --oneline --pretty=format:"- %s" >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "" >> release_notes.md
          echo "First release of Konfig - A unified configuration management library for Rust." >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo '```toml' >> release_notes.md
        echo '[dependencies]' >> release_notes.md
        echo "konfig = \"${{ needs.validate.outputs.version }}\"" >> release_notes.md
        echo '```' >> release_notes.md

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ needs.validate.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [publish-main]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        publish_branch: gh-pages
        force_orphan: true